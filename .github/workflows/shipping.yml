name: Shipping

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install tools
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: python -m pip install --requirement requirements.txt

      - name: Compile protos
        run: make

      - name: Run tests
        run: python manage.py test
        env:
          SECRET_KEY: secret

  containers:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Login to registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deployment:
    needs: containers
    runs-on: ubuntu-latest
    environment: main

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set Kubernetes config
        working-directory: kubernetes
        run: 'echo $KUBE_CONFIG > kube.yml'
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Create environment
        working-directory: kubernetes
        run: |
          echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> environment.properties
          echo "S3_STORAGE_BUCKET_NAME=${{ secrets.S3_STORAGE_BUCKET_NAME }}" >> environment.properties
          echo "S3_ENDPOINT_URL=${{ secrets.S3_ENDPOINT_URL }}" >> environment.properties
          echo "MAILGUN_API_URL=${{ secrets.MAILGUN_API_URL }}" >> environment.properties
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> environment.properties
          echo "SERVER_EMAIL=${{ secrets.SERVER_EMAIL }}" >> environment.properties
          echo "ADMINS=${{ secrets.ADMINS }}" >> environment.properties
          echo "EMAIL_LINKS_DOMAIN=${{ secrets.EMAIL_LINKS_DOMAIN }}" >> environment.properties
          kubectl --kubeconfig=kube.yml create configmap environment --from-env-file=environment.properties -o yaml --dry-run=client | kubectl apply -f -

      - name: Create vault
        working-directory: kubernetes
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> vault.properties
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> vault.properties
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> vault.properties
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> vault.properties
          echo "MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}" >> vault.properties
          echo "MAILGUN_WEBHOOK_SIGNING_KEY=${{ secrets.MAILGUN_WEBHOOK_SIGNING_KEY }}" >> vault.properties
          echo "MAILJET_API_KEY=${{ secrets.MAILJET_API_KEY }}" >> vault.properties
          echo "MAILJET_SECRET_KEY=${{ secrets.MAILJET_SECRET_KEY }}" >> vault.properties
          kubectl --kubeconfig=kube.yml create secret generic vault --from-env-file=vault.properties -o yaml --dry-run=client | kubectl apply -f -

      - name: Deploy
        working-directory: kubernetes
        run: kubectl --kubeconfig=kube.yml apply -f fyreplace.yml
